from aiogram import Router, F, Bot
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from states import OrderForm
from config import ADMIN_ID
from keyboards import get_main_menu
from database import get_user_orders, save_order
from aiogram.filters import Command
from utils import format_order
from utils import is_admin
from database import get_all_active_orders, save_order, mark_order_completed

router = Router()

class OrderForm(StatesGroup):
    waiting_for_order = State()

def get_cancel_button(language="ru"):
    if language == "ru":
        text = "‚ùå –û—Ç–º–µ–Ω–∞"
    else:
        text = "‚ùå Cancel"
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=text, callback_data="cancel_order")]]
    )

@router.message(Command("orders"))
async def list_orders(message: Message, state: FSMContext):
    await list_orders_handler(message, state)

@router.callback_query(lambda c: c.data == "back_to_orders")
async def back_to_orders(callback: CallbackQuery, state: FSMContext):
    await list_orders_handler(callback.message, state)
    await callback.answer()

async def list_orders_handler(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    data = await state.get_data()
    language = data.get("language", "ru")

    orders = await get_all_active_orders()
    if not orders:
        if language == "ru":
            await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        else:
            await message.answer("üì≠ No active orders yet.")
        return
    
    for order in orders:
        order_id, username, order_text = order
        if language == "ru":
            text = f"üìå –ó–∞–∫–∞–∑ #{order_id}\nüë§ @{username}\nüí¨ {order_text}"
        else:
            text = f"üìå Order #{order_id}\nüë§ @{username}\nüí¨ {order_text}"
        await message.answer(text, reply_markup=get_order_action_buttons(order_id))

@router.callback_query(lambda c: c.data == "order")
async def start_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")
    
    if language == "ru":
        text = "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑. –ù–∞–ø—Ä–∏–º–µ—Ä: \"–ù—É–∂–µ–Ω Telegram-–±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤.\" –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞."
    else:
        text = "üìù Describe your order. For example: \"Need a Telegram bot for orders.\" Or press ‚ùå Cancel."
    
    await callback.message.edit_text(text, reply_markup=get_cancel_button(language))
    await state.set_state(OrderForm.waiting_for_order)
    await callback.answer()

@router.message(OrderForm.waiting_for_order)
async def process_order(message: Message, state: FSMContext, bot: Bot):
    order_text = message.text
    await save_order(message.from_user.username, message.from_user.id, order_text)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    await state.clear()
    
    await bot.send_message(ADMIN_ID, f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{message.from_user.username}:\n\n{order_text}")

    data = await state.get_data()
    language = data.get("language", "ru")
    
    if language == "ru":
        text = "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!"
    else:
        text = "‚úÖ Your order has been accepted!"
    
    await message.answer(text, reply_markup=get_main_menu(language))

@router.callback_query(lambda c: c.data == "cancel_order")
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")
    
    if language == "ru":
        text = "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞."
        welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! \n\n–≠—Ç–æ –±–æ—Ç-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏ –±–æ—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å–æ –º–Ω–æ–π.\n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:"
    else:
        text = "‚ùå Order canceled. If you change your mind, you can try again."
        welcome_text = "Welcome back! \n\nThis is a portfolio bot and a bot to contact me.\nChoose the section you are interested in:"
    
    await callback.message.edit_text(text)
    await callback.message.answer(welcome_text, reply_markup=get_main_menu(language))
    await callback.answer()

def get_back_to_orders_button():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_orders")]]
    )

def get_order_action_buttons(order_id):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_{order_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_orders")]
        ]
    )

@router.callback_query(lambda c: c.data.startswith("complete_"))
async def complete_order(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[1])
    await mark_order_completed(order_id)
    
    data = await state.get_data()
    language = data.get("language", "ru")
    
    if language == "ru":
        text = f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π."
    else:
        text = f"‚úÖ Order #{order_id} marked as completed."
    
    await callback.message.edit_text(text)
    await callback.answer()